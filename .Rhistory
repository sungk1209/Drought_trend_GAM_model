qnorm(-1.5)
qnorm(0.006)
qnorm(0.06)
qnorm(0.064)
qnorm(0.065)
qnorm(0.066)
pnorm(-1.5)
require(lubridate)
require(tidyverse)
require(mgcv)
require(dplyr)
require(ncdf4)
require(fitdistrplus)
require(zoo)
library(RANN)
require(viridis)
select <- dplyr::select
data_path <- "../data"
output_path <- "../output/"
require(lubridate)
require(tidyverse)
require(dplyr)
require(ncdf4)
require(fitdistrplus)
require(zoo)
library(RANN)
select <- dplyr::select
data_path <- "../data/"
output_path <- "../output/"
require(lubridate)
require(tidyverse)
require(mgcv)
require(dplyr)
require(viridis)
select <- dplyr::select
data_path <- "../data"
output_path <- "../output/"
require(lubridate)
require(tidyverse)
require(dplyr)
require(ncdf4)
require(fitdistrplus)
require(zoo)
library(RANN)
select <- dplyr::select
data_path <- "../data/"
output_path <- "../output/"
### Read in
require(lubridate)
require(tidyverse)
require(dplyr)
require(ncdf4)
require(fitdistrplus)
require(zoo)
library(RANN)
select <- dplyr::select
data_path <- "../data/"
output_path <- "../output/"
require(lubridate)
require(tidyverse)
require(dplyr)
require(ncdf4)
require(fitdistrplus)
require(zoo)
library(RANN)
select <- dplyr::select
data_path <- "../data/"
output_path <- "../output/"
require(lubridate)
require(tidyverse)
require(dplyr)
require(ncdf4)
require(fitdistrplus)
require(zoo)
library(RANN)
select <- dplyr::select
data_path <- "../data/"
output_path <- "../output/"
require(lubridate)
require(tidyverse)
require(dplyr)
require(ncdf4)
require(fitdistrplus)
require(zoo)
library(RANN)
data_path <- "../data/"
output_path <- "../output/"
select <- dplyr::select
getwd()
getwd()
getwd("D:/Paper2/github/")
setwd("D:/Paper2/github/")
require(lubridate)
require(tidyverse)
require(dplyr)
require(gratia)
require(mgcv)
require(MASS)
select <- dplyr::select
data_path <- "../data/"
output_path <- "../output/"
disp_to_shape <- function(disp){
1/ exp(-7 + log(1 + exp(disp)))
}
### Function to draw from gammals
rmvn <- function(n, mu, sig) { ## MVN random deviates
L <- mroot(sig)
m <- ncol(L)
t(mu + L %*% matrix(rnorm(m*n), m, n))
}
draw_fromgammals <- function(model, n, new_data){
a <- nrow(new_data)
Cg <- predict(model, new_data, type = "lpmatrix")
Vb <- vcov(model)
sims <- rmvn(n, mu = coef(model), sig = Vb)
coef_dims <- dim(sims)
mean_dims <- 1:(coef_dims[2]/2)
shape_dims <- (max(mean_dims)+1):coef_dims[2]
fits_mean <- Cg[,mean_dims] %*% t(sims)[mean_dims,]
fits_shape <- Cg[,shape_dims] %*% t(sims)[shape_dims,]
pred_values <- data.frame(draw = seq(1,coef_dims[1]), mean_link = c(fits_mean), shape_link = c(fits_shape))
pred_values <- pred_values %>%
mutate(meanGI = exp(mean_link)) %>%
mutate(shapeGI = disp_to_shape(shape_link)) %>%
mutate(scaleGI = meanGI/ shapeGI)
pred_values <- bind_cols(new_data, pred_values) %>%
mutate(date = as.Date(paste0(year,"-",month,"-01")))  %>%
group_by(date) %>%
summarize(meanGI = mean(meanGI), shapeGI = mean(shapeGI), scaleGI = mean(scaleGI)) %>%
select(date,meanGI,shapeGI,scaleGI)
}
j <- 1
loc <- site_list[[j]]
site_list <- list()
site_list[1] <- list(data.frame(site="okc_OK",
lon=c(-98,-97.5),
lat= c(35.0,35.5)))
site_list[2] <- list(data.frame(site="phx_AZ",
lon= c(-112.5,-112.0),
lat=c(33.50,34.00)))
site_list[3] <- list(data.frame(site="Den_CO",
lon= c(-105.0,-104.5),
lat=c(39.50,40.00)))
site_list[4] <- list(data.frame(site="Aber_WA",
lon= c(-124.0,-123.5),
lat=c(46.50,47.00)))
site_list[5] <- list(data.frame(site="Alb_GA",
lon= c(-84.5,-84.0),
lat=c(31.50,32.00)))
site_list[6] <- list(data.frame(site="Mrv_OH",
lon= c(-83.5,-83.0),
lat=c(40.00,40.50)))
site_list[7] <- list(data.frame(site="Mor_MN",
lon= c(-96.0,-95.5),
lat=c(45.50,46.00)))
site_list[8] <- list(data.frame(site="Nyc_NY",
lon= c(-74.5,-74.0),
lat=c(40.50,41.00)))
site_list[9] <- list(data.frame(site="Los_CA",
lon= c(-118.5,-118.0),
lat=c(34.00,34.50)))
site_list[10] <- list(data.frame(site="Wax_TX",
lon= c(-97.0,-96.5),
lat=c(32.00,32.50)))
site_list[11] <- list(data.frame(site="SJn_CO",
lon= c(-106.5,-106.0),
lat=c(37.50,38.00)))
site_list[12] <- list(data.frame(site="Cwa_NC",
lon= c(-79.0,-78.5),
lat=c(33.50,34.00)))
site_list[13] <- list(data.frame(site="Grd_MT",
lon= c(-111,-110.5),
lat=c(44.5,45.00)))
site_list[14] <- list(data.frame(site="Roe_NM",
lon= c(-109,-108.5),
lat=c(31.0,31.50)))
loc <- site_list[[j]]
output.p <- file.path(output_path, loc$site[1])
gam_fit <- readRDS(file =paste0(output.p,"/model.rds"))
prcp_df <- readRDS(file =paste0(output.p,"/prcp_df.rds"))
prcp_pos <- prcp_df %>%
filter(precip >0)
min_gridm <- min((prcp_pos %>% filter(model == "gridmet"))$year)
max_gridm <- max((prcp_pos %>% filter(model == "gridmet"))$year)
min_cru <- min((prcp_pos %>% filter(model == "cru"))$year)
max_cru <- max((prcp_pos %>% filter(model == "cru"))$year)
min_naspa <- min((prcp_pos %>% filter(model == "naspa"))$year)
max_naspa <- max((prcp_pos %>% filter(model == "naspa"))$year)
tmonth <- 7
gridmet_pred_df <- data.frame(expand.grid(year = seq(min_naspa,max_naspa),month = tmonth), model = "gridmet", plot_model = "naspa") %>%
bind_rows(data.frame(expand.grid(year = seq(min_gridm,max_gridm),month = tmonth),model = "gridmet", plot_model = "gridmet")) %>%
bind_rows(data.frame(expand.grid(year = seq(min_cru,max_cru),month = tmonth), model = "gridmet", plot_model = "cru"))
### Make predictions based on this
GAM_predict <- predict(gam_fit, newdata = gridmet_pred_df, se.fit = TRUE, type = "response")
GAM_predict  <- GAM_predict %>%
data.frame() %>%
as_tibble() %>%
rename(est_mean = 1) %>%
rename(est_shape = 2)
GAM_predict <- GAM_predict %>%
mutate(est_shape = 1/exp(est_shape)) %>%
mutate(est_scale = est_mean/est_shape) %>%
mutate(est_sd = (est_shape * est_scale^2)^0.5)
modeled_df <- transform(gridmet_pred_df,
meanGI = GAM_predict$est_mean,
shapeGI = GAM_predict$est_shape,
scaleGI = GAM_predict$est_scale)
modeled_df <- modeled_df %>%
mutate(date = as.Date(paste0(year,"-",month,"-01"))) %>%
arrange(date) %>%
group_by(date) %>%
summarize(meanGI = mean(meanGI), shapeGI = mean(shapeGI), scaleGI = mean(scaleGI))
derive_df <- modeled_df %>%
mutate(year = year(date)) %>%
mutate(slope = meanGI - lag(meanGI)) %>%
mutate(draw = 10000)
draw_total <- data.frame()
for( i in c(1:100)) {
draw_df <- draw_fromgammals(model = gam_fit, n = 1, new_data = gridmet_pred_df)
draw_df <- draw_df %>%
mutate(year = year(date)) %>%
mutate(slope = meanGI - lag(meanGI)) %>%
mutate(draw = i)
draw_total <- bind_rows(draw_total, draw_df)
}
draw_total <- bind_rows(derive_df, draw_total)
p1 <- ggplot(draw_total, aes(x = date, y = slope, group = draw)) +
geom_line(color ="grey60") +
#geom_line(aes(color = ifelse(slope < 0, "Below Zero", "Above Zero")), size = 1) +
#scale_color_manual(values = c("red", "blue")) +
#geom_line(data = draw_total %>% filter(draw == 10000), aes(x = date, y= slope, color = "Modeled")) +
theme_bw()
p2 <- ggplot(draw_total, aes(x = date, y = meanGI, group = draw, color = "draws")) +
geom_line(color ="grey60") +
geom_line(data = draw_total %>% filter(draw == 10000), aes(x = date, y= meanGI, color = "Modeled")) +
theme_bw()
combined_plot <- grid.arrange(p1, p2, nrow = 2)
require(gridExtra)
combined_plot <- grid.arrange(p1, p2, nrow = 2)
grid.arrange(p1, p2, nrow = 2)
p1 <- ggplot(draw_total, aes(x = date, y = slope, group = draw, color = "draws")) +
geom_line() +
#geom_line(aes(color = ifelse(slope < 0, "Below Zero", "Above Zero")), size = 1) +
#scale_color_manual(values = c("red", "blue")) +
geom_line(data = draw_total %>% filter(draw == 10000), aes(x = date, y= slope, color = "Modeled")) +
theme_bw()
p2 <- ggplot(draw_total, aes(x = date, y = meanGI, group = draw, color = "draws")) +
geom_line() +
geom_line(data = draw_total %>% filter(draw == 10000), aes(x = date, y= meanGI, color = "Modeled")) +
theme_bw()
combined_plot <- grid.arrange(p1, p2, nrow = 2)
p1 <- ggplot(draw_total, aes(x = date, y = slope, group = draw, color = "draws")) +
geom_line() +
#geom_line(aes(color = ifelse(slope < 0, "Below Zero", "Above Zero")), size = 1) +
geom_line(data = draw_total %>% filter(draw == 10000), aes(x = date, y= slope, color = "Modeled")) +
scale_color_manual(values = c("grey", "blue")) +
theme_bw()
p2 <- ggplot(draw_total, aes(x = date, y = meanGI, group = draw, color = "draws")) +
geom_line() +
geom_line(data = draw_total %>% filter(draw == 10000), aes(x = date, y= meanGI, color = "Modeled")) +
theme_bw()
combined_plot <- grid.arrange(p1, p2, nrow = 2)
# Display the combined plot
print(combined_plot)
p1 <- ggplot(draw_total, aes(x = date, y = slope, group = draw, color = "draws")) +
geom_line() +
#geom_line(aes(color = ifelse(slope < 0, "Below Zero", "Above Zero")), size = 1) +
geom_line(data = draw_total %>% filter(draw == 10000), aes(x = date, y= slope, color = "Modeled")) +
scale_color_manual(values = c("grey", "blue")) +
theme_bw()
p2 <- ggplot(draw_total, aes(x = date, y = meanGI, group = draw, color = "draws")) +
geom_line() +
geom_line(data = draw_total %>% filter(draw == 10000), aes(x = date, y= meanGI, color = "Modeled")) +
scale_color_manual(values = c("grey", "blue")) +
theme_bw()
combined_plot <- grid.arrange(p1, p2, nrow = 2)
combined_plot <- grid.arrange(p1, p2, nrow = 2, top = "Oklahoma city 3 month prcp. in MJJ")
combined_plot <- grid.arrange(p1, p2, nrow = 2, top = "Oklahoma city 3 month prcp. in MJJ (top: slope, bottom: prcp)")
