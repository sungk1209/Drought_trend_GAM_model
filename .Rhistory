fit <- Arima(norm_flow$norm_cfs, order = c(1,0,0))
checkresiduals(fit)
summary(fit)
#Fit to ARMA(1,1)
fit.arma<- Arima(norm_flow$norm_cfs, order = c(1,0,1))
checkresiduals(fit.arma)
summary(fit.arma)
#Let ARMA model decide it
fit.auto <- auto.arima(norm_flow$norm_cfs)
summary(fit.auto)
checkresiduals(fit.auto)
#################################################33
###6. generate random data with AR(1)
##############################################
###########################################################################
###  Simulate from the model
###########################################################################
### Save theta 1 estimate
theta.1<- fit$coef[[1]]
theta.1
### Save the innovation variance
var_innov <- fit$sigma2
sd_innov <- var_innov^0.5
sd_innov
### Simulate from the model
sim_ts <- arima.sim(n = 100, list(ar = c(theta.1), sd = sd_innov))
### Create a dataframe
#sim_df <- data.frame(time=seq(1,100), sim = as.numeric(sim_ts))
#head(sim_df)
#p <- ggplot(sim_df, aes(x=time, y=sim)) + geom_line()
#p
paras<- norm_flow %>% select(shape,rate, month) %>%
group_by(month) %>%
summarise(shape = mean(shape), rate = mean(rate))
sim_df <- data.frame(year = 1920, month = seq(1:12)) %>%
complete(year = seq(1920,2020), month = seq(1:12)) %>%
right_join(paras, by= "month")
sim_df <- sim_df %>%
mutate(sim_ts = arima.sim(n = 1212, list(ar = c(theta.1), sd = sd_innov))) %>%
mutate(prob = pnorm(sim_ts)) %>%
mutate(flow = qgamma(prob, shape = shape, rate = rate)) %>%
mutate(date = as.Date(paste0(year, "-", month, "-15")))
p <- ggplot(sim_df) + geom_line(aes(x = date, y = flow)) +
labs(y = "Flow (cfs)")+
scale_y_continuous() +
theme_classic(base_size = 18)
p
### Reorganize, group by site number, and add all dates with NAs between
#cubic feet per second
#flow_daily <- flow_daily %>%
flow_daily <- flow_daily %>%
mutate(month = month(Date), year = year(Date))
head(flow_daily)
flow_month <- flow_daily %>%
group_by(month,year) %>%
summarise(flow = mean(Flow)) %>%
mutate(date = as.Date(paste0(year, "-", month, "-15"))) %>%
arrange(date)
group_by(site_no) %>%
complete(Date = seq.Date(min(flow_daily$Date), max(flow_daily$Date), by="day")) %>%
ungroup()
flow_daily
flow_month <- flow_daily %>%
group_by(month,year) %>%
summarise(flow = mean(Flow)) %>%
mutate(date = as.Date(paste0(year, "-", month, "-15"))) %>%
arrange(date)
p <- ggplot(flow_month) + geom_line(aes(x = date, y = flow)) +
labs(y = "Flow (cfs)")+
theme_classic(base_size = 18)
p
norm_flow <- flow_month %>%
group_by(month) %>%
mutate(shape = fitdist(flow, "gamma", method = "mme")$estimate[[1]],
rate = fitdist(flow, "gamma",method = "mme")$estimate[[2]]) %>%
mutate(prob = pgamma(flow, shape = shape, rate = rate)) %>%
mutate(norm_cfs = qnorm(prob ,mean = 0, sd = 1)) %>%
ungroup()
p <- ggplot(norm_flow) + geom_line(aes(x = date, y = norm_cfs)) +
labs(y = "normalized flow ")+
geom_hline(yintercept = 0,color = "red", size = 1.5) +
theme_classic(base_size = 24)
p
norm_flow <- norm_flow %>%
mutate(lag_cfs = lag(norm_cfs)) %>%
drop_na()
###3 #######################################
### Partial lag autocorrelation
############################################
cov(norm_flow$norm_cfs, norm_flow$lag_cfs)
acf(norm_flow$norm_cfs, lag.max = 12, plot = TRUE)
pacf(norm_flow$norm_cfs, lag.max = 12, plot = FALSE)
pacf(norm_flow$norm_cfs, lag.max = 12, plot = TRUE)
p <- ggPacf(norm_flow$norm_cfs, lag.max = 23) +
theme_classic(base_size = 20)
p
ggsave(filename =paste0(output_path,"PACF.png"), plot = p, width =12.5, height = 8, dpi = 300)
p
#Fit to AR(1)
fit <- Arima(norm_flow$norm_cfs, order = c(1,0,0))
require(arima)
require(forecast)
###########################################################################
###  Download all the data
###########################################################################
### Define the gauges we are interested in
site_id <- "09163500"
### Get USGS gauge information
us_site_info <- readNWISsite(site_id)
us_site_info
#name = "olentagy_herrick"
### Extract just the location information
usgs_loc <- data.frame(id = site_id, long_name = us_site_info$site_no, lon = us_site_info$dec_long_va , lat = us_site_info$dec_lat_va )
usgs_loc
###################################################################
### Download USGS flow data
###################################################################
### Check available data
data_query <- whatNWISdata(siteNumber = site_id)
data.frame(data_query)
### Download daily flows
today_date <- Sys.Date()
flow_daily <- readNWISdv(site_id, parameterCd = "00060", statCd = "00003", startDate = "1800-01-01", endDate=today_date)
flow_daily <- addWaterYear(flow_daily)
flow_daily <- renameNWISColumns(flow_daily)
### Reorganize, group by site number, and add all dates with NAs between
#cubic feet per second
#flow_daily <- flow_daily %>%
flow_daily <- flow_daily %>%
mutate(month = month(Date), year = year(Date))
head(flow_daily)
flow_month <- flow_daily %>%
group_by(month,year) %>%
summarise(flow = mean(Flow)) %>%
mutate(date = as.Date(paste0(year, "-", month, "-15"))) %>%
arrange(date)
flow_month
p <- ggplot(flow_month) + geom_line(aes(x = date, y = flow)) +
labs(y = "Flow (cfs)")+
theme_classic(base_size = 18)
p
ggsave(filename =paste0(output_path,"monthlyflow3.png"), plot = p, width =12.5, height = 8, dpi = 300)
ggsave(filename =paste0(output_path,"monthlyflow3.svg"), plot = p, width =12.5, height = 8, dpi = 300)
getwd()
norm_flow <- flow_month %>%
group_by(month) %>%
mutate(shape = fitdist(flow, "gamma", method = "mme")$estimate[[1]],
rate = fitdist(flow, "gamma",method = "mme")$estimate[[2]]) %>%
mutate(prob = pgamma(flow, shape = shape, rate = rate)) %>%
mutate(norm_cfs = qnorm(prob ,mean = 0, sd = 1)) %>%
ungroup()
p <- ggplot(norm_flow) + geom_line(aes(x = date, y = norm_cfs)) +
labs(y = "normalized flow ")+
geom_hline(yintercept = 0,color = "red", size = 1.5) +
theme_classic(base_size = 24)
p
###3 #######################################
### Partial lag autocorrelation
############################################
cov(norm_flow$norm_cfs, norm_flow$lag_cfs)
norm_flow <- norm_flow %>%
mutate(lag_cfs = lag(norm_cfs)) %>%
drop_na()
###3 #######################################
### Partial lag autocorrelation
############################################
cov(norm_flow$norm_cfs, norm_flow$lag_cfs)
acf(norm_flow$norm_cfs, lag.max = 12, plot = TRUE)
pacf(norm_flow$norm_cfs, lag.max = 12, plot = TRUE)
p <- ggPacf(norm_flow$norm_cfs, lag.max = 23) +
theme_classic(base_size = 20)
p
p <- ggAcf(norm_flow$norm_cfs, lag.max = 23) +
theme_classic(base_size = 20)
p
#Fit to AR(1)
fit <- Arima(norm_flow$norm_cfs, order = c(1,0,0))
checkresiduals(fit)
summary(fit)
theta.1<- fit$coef[[1]]
theta.1
### Save the innovation variance
var_innov <- fit$sigma2
sd_innov <- var_innov^0.5
sd_innov
### Simulate from the model
sim_ts <- arima.sim(n = 100, list(ar = c(theta.1), sd = sd_innov))
#p <- ggplot(sim_df, aes(x=time, y=sim)) + geom_line()
#p
paras<- norm_flow %>% select(shape,rate, month) %>%
group_by(month) %>%
summarise(shape = mean(shape), rate = mean(rate))
sim_df <- data.frame(year = 1920, month = seq(1:12)) %>%
complete(year = seq(1920,2020), month = seq(1:12)) %>%
right_join(paras, by= "month")
sim_df <- sim_df %>%
mutate(sim_ts = arima.sim(n = 1212, list(ar = c(theta.1), sd = sd_innov))) %>%
mutate(prob = pnorm(sim_ts)) %>%
mutate(flow = qgamma(prob, shape = shape, rate = rate)) %>%
mutate(date = as.Date(paste0(year, "-", month, "-15")))
p <- ggplot(sim_df) + geom_line(aes(x = date, y = flow)) +
labs(y = "Flow (cfs)")+
scale_y_continuous() +
theme_classic(base_size = 18)
p
#p <- ggplot(sim_df, aes(x=time, y=sim)) + geom_line()
#p
paras<- norm_flow %>% select(shape,rate, month) %>%
group_by(month) %>%
summarise(shape = mean(shape), rate = mean(rate))
sim_df <- data.frame(year = 1920, month = seq(1:12)) %>%
complete(year = seq(1920,2020), month = seq(1:12)) %>%
right_join(paras, by= "month")
sim_df <- sim_df %>%
mutate(sim_ts = arima.sim(n = 1212, list(ar = c(theta.1), sd = sd_innov))) %>%
mutate(prob = pnorm(sim_ts)) %>%
mutate(flow = qgamma(prob, shape = shape, rate = rate)) %>%
mutate(date = as.Date(paste0(year, "-", month, "-15")))
p <- ggplot(sim_df) + geom_line(aes(x = date, y = flow)) +
labs(y = "Flow (cfs)")+
scale_y_continuous() +
theme_classic(base_size = 18)
p
theta.1
### Save the innovation variance
var_innov <- fit$sigma2
sd_innov <- var_innov^0.5
sd_innov
#p <- ggplot(sim_df, aes(x=time, y=sim)) + geom_line()
#p
paras<- norm_flow %>% select(shape,rate, month) %>%
group_by(month) %>%
summarise(shape = mean(shape), rate = mean(rate))
sim_df <- data.frame(year = 1920, month = seq(1:12)) %>%
complete(year = seq(1920,2020), month = seq(1:12)) %>%
right_join(paras, by= "month")
sim_df <- sim_df %>%
mutate(sim_ts = arima.sim(n = 1212, list(ar = c(theta.1), sd = sd_innov))) %>%
mutate(prob = pnorm(sim_ts)) %>%
mutate(flow = qgamma(prob, shape = shape, rate = rate)) %>%
mutate(date = as.Date(paste0(year, "-", month, "-15")))
p <- ggplot(sim_df) + geom_line(aes(x = date, y = flow)) +
labs(y = "Flow (cfs)")+
scale_y_continuous() +
theme_classic(base_size = 18)
p
fit$sigma2
var_innov <- fit$sigma2
sd_innov <- var_innov^0.5
sd_innov
theta.1
fit
#Let ARMA model decide it
fit.auto <- auto.arima(norm_flow$norm_cfs)
summary(fit.auto)
checkresiduals(fit.auto)
#Fit to ARMA(1,1)
fit.arma<- Arima(norm_flow$norm_cfs, order = c(1,0,1))
checkresiduals(fit.arma)
summary(fit.arma)
#Fit to AR(1)
fit <- Arima(norm_flow$norm_cfs, order = c(1,0,0))
checkresiduals(fit)
summary(fit)
###########################################################################
###  Simulate from the model
###########################################################################
### Save theta 1 estimate
theta.1<- fit$coef[[1]]
theta.1
### Save the innovation variance
var_innov <- fit$sigma2
sd_innov <- var_innov^0.5
sd_innov
norm_flow
2.77/1.69e-4
View(flow_month)
View(flow_month)
it <- Arima(norm_flow$norm_cfs, order = c(1,0,0))
checkresiduals(fit)
summary(fit)
fit <- Arima(norm_flow$norm_cfs, order = c(1,0,0))
checkresiduals(fit)
summary(fit)
#p <- ggplot(sim_df, aes(x=time, y=sim)) + geom_line()
#p
paras<- norm_flow %>% select(shape,rate, month) %>%
group_by(month) %>%
summarise(shape = mean(shape), rate = mean(rate))
paras
sim_df <- data.frame(year = 1920, month = seq(1:12)) %>%
complete(year = seq(1920,2020), month = seq(1:12)) %>%
right_join(paras, by= "month")
sim_df
sim_df <- sim_df %>%
mutate(sim_ts = arima.sim(n = 1212, list(ar = c(theta.1), sd = sd_innov))) %>%
mutate(prob = pnorm(sim_ts)) %>%
mutate(flow = qgamma(prob, shape = shape, rate = rate)) %>%
mutate(date = as.Date(paste0(year, "-", month, "-15")))
p <- ggplot(sim_df) + geom_line(aes(x = date, y = flow)) +
labs(y = "Flow (cfs)")+
scale_y_continuous() +
theme_classic(base_size = 18)
p
prcp_df
require(lubridate)
require(tidyverse)
require(dplyr)
require(ncdf4)
require(fitdistrplus)
require(zoo)
library(RANN)
select <- dplyr::select
data_path <- "../data"
output_path <- "../output/"
inst_df <- readRDS(file =paste0(output_path,"instrument_df.rds"))
predict_df <- readRDS(file = paste0(output_path,"predictedpreip.rds"))
inst_df<- instrument_df %>%
mutate(month = month(date)) %>%
select(-month_day)
predict_df <- predict_df %>%
mutate(year = year(date)) %>%
mutate(variable = "predicted") %>%
mutate(model = "naspa")%>%
mutate(units = "mm/month") %>%
mutate(site = "OKC,OK") %>%
select(date,site, year, variable, model , precip, units, month)
prcp_df <- as.data.frame(rbind(inst_df,predict_df))
prcp_df$model <- as.factor(prcp_df$model)
prcp_df <- prcp_df %>%
arrange(date)
getwd()
getwd()
devtools::install_github("jstagge/ressim")
install.packages(c("backports", "broom", "cli", "ClustGeo", "conquer", "cpp11", "crayon", "crosstalk", "data.table", "deldir", "dendextend", "desc", "diffobj", "digest", "DT", "e1071", "fields", "fitdistrplus", "future", "generics", "gert", "ggsignif", "haven", "hms", "htmltools", "htmlwidgets", "knitr", "lifecycle", "lubridate", "lwgeom", "maps", "maptools", "matrixStats", "mime", "nloptr", "openssl", "parallelly", "PearsonDS", "pillar", "pkgload", "R6", "raster", "rcmdcheck", "RcppArmadillo", "readr", "remotes", "reprex", "rlang", "rmarkdown", "roxygen2", "rvest", "s2", "sessioninfo", "sf", "spData", "spdep", "stringi", "systemfonts", "testthat", "tibble", "tidyr", "tinytex", "tzdb", "usethis", "uuid", "V8", "viridis", "vroom", "waldo", "xfun", "XML"))
install.packages(c("backports", "broom", "cli", "ClustGeo", "conquer", "cpp11", "crayon", "crosstalk", "data.table", "deldir", "dendextend", "desc", "diffobj", "digest", "DT", "e1071", "fields", "fitdistrplus", "future", "generics", "gert", "ggsignif", "haven", "hms", "htmltools", "htmlwidgets", "knitr", "lifecycle", "lubridate", "lwgeom", "maps", "maptools", "matrixStats", "mime", "nloptr", "openssl", "parallelly", "PearsonDS", "pillar", "pkgload", "R6", "raster", "rcmdcheck", "RcppArmadillo", "readr", "remotes", "reprex", "rlang", "rmarkdown", "roxygen2", "rvest", "s2", "sessioninfo", "sf", "spData", "spdep", "stringi", "systemfonts", "testthat", "tibble", "tidyr", "tinytex", "tzdb", "usethis", "uuid", "V8", "viridis", "vroom", "waldo", "xfun", "XML"))
install.packages(c("backports", "broom", "cli", "ClustGeo", "conquer", "cpp11", "crayon", "crosstalk", "data.table", "deldir", "dendextend", "desc", "diffobj", "digest", "DT", "e1071", "fields", "fitdistrplus", "future", "generics", "gert", "ggsignif", "haven", "hms", "htmltools", "htmlwidgets", "knitr", "lifecycle", "lubridate", "lwgeom", "maps", "maptools", "matrixStats", "mime", "nloptr", "openssl", "parallelly", "PearsonDS", "pillar", "pkgload", "R6", "raster", "rcmdcheck", "RcppArmadillo", "readr", "remotes", "reprex", "rlang", "rmarkdown", "roxygen2", "rvest", "s2", "sessioninfo", "sf", "spData", "spdep", "stringi", "systemfonts", "testthat", "tibble", "tidyr", "tinytex", "tzdb", "usethis", "uuid", "V8", "viridis", "vroom", "waldo", "xfun", "XML"))
install.packages(c("backports", "broom", "cli", "ClustGeo", "conquer", "cpp11", "crayon", "crosstalk", "data.table", "deldir", "dendextend", "desc", "diffobj", "digest", "DT", "e1071", "fields", "fitdistrplus", "future", "generics", "gert", "ggsignif", "haven", "hms", "htmltools", "htmlwidgets", "knitr", "lifecycle", "lubridate", "lwgeom", "maps", "maptools", "matrixStats", "mime", "nloptr", "openssl", "parallelly", "PearsonDS", "pillar", "pkgload", "R6", "raster", "rcmdcheck", "RcppArmadillo", "readr", "remotes", "reprex", "rlang", "rmarkdown", "roxygen2", "rvest", "s2", "sessioninfo", "sf", "spData", "spdep", "stringi", "systemfonts", "testthat", "tibble", "tidyr", "tinytex", "tzdb", "usethis", "uuid", "V8", "viridis", "vroom", "waldo", "xfun", "XML"))
install.packages(c("backports", "broom", "cli", "ClustGeo", "conquer", "cpp11", "crayon", "crosstalk", "data.table", "deldir", "dendextend", "desc", "diffobj", "digest", "DT", "e1071", "fields", "fitdistrplus", "future", "generics", "gert", "ggsignif", "haven", "hms", "htmltools", "htmlwidgets", "knitr", "lifecycle", "lubridate", "lwgeom", "maps", "maptools", "matrixStats", "mime", "nloptr", "openssl", "parallelly", "PearsonDS", "pillar", "pkgload", "R6", "raster", "rcmdcheck", "RcppArmadillo", "readr", "remotes", "reprex", "rlang", "rmarkdown", "roxygen2", "rvest", "s2", "sessioninfo", "sf", "spData", "spdep", "stringi", "systemfonts", "testthat", "tibble", "tidyr", "tinytex", "tzdb", "usethis", "uuid", "V8", "viridis", "vroom", "waldo", "xfun", "XML"))
require(Rtools)
install.packages("Rtools")
require(stars)
require(ncdf4)
require(lubridate)
require(fields)
require(purrr)
require(tidyverse)
require(zoo)
require(mgcv)
require(gratia)
require(dplyr)
select <- dplyr::select
### Path for Data and Output
data_path <- "../data"
output_path <- "../output/"
### Set up output folders
str(gam_fit)
getwd()
getwd()
require(lubridate)
require(tidyverse)
require(mgcv)
require(dplyr)
require(ncdf4)
require(fitdistrplus)
require(zoo)
library(RANN)
require(viridis)
library(ggthemes)
library(cowplot)
require(colorblindr)
select <- dplyr::select
data_path <- "../data"
output_path <- "../output/"
instrument_df <- readRDS(file =paste0(output_path,"instrument_df.rds"))
naspa_df <- readRDS(file = paste0(output_path,"predictedpreip.rds"))
pred_df<- readRDS(file = paste0(output_path,"pred_df.rds"))
getwd()
head(prcp_pos)
loc
loc <- data.frame(site="OKC,OK",
lon=c(-98,-97.5),
lat= c(35.0,35.5))
loc
require(lubridate)
require(tidyverse)
require(mgcv)
require(dplyr)
require(ncdf4)
require(fitdistrplus)
require(zoo)
library(RANN)
require(viridis)
library(ggthemes)
library(cowplot)
require(colorblindr)
require(ggridges)
select <- dplyr::select
data_path <- "../data"
output_path <- "../output/"
inst_df <- readRDS(file =paste0(output_path,loc$site[1],"instrument_df.rds"))
naspa_df <- readRDS(file = paste0(output_path,loc$site[1],"predictedpreip.rds"))
getwd()
getwd()
here::here()
closest
#if (sum(is.na(naspa_points))>0) {
#  next
#}
### Find the k closest points
#library_df <- library_df %>% select(-i)
closest <- nn2(data= library_df,
query = naspa_points, k=n_neighbors)
require(lubridate)
require(tidyverse)
require(dplyr)
require(ncdf4)
require(fitdistrplus)
require(zoo)
library(RANN)
select <- dplyr::select
data_path <- "../data/"
output_path <- "../output/"
output.p <- file.path(output_path, loc$site[1])
#if (sum(is.na(naspa_points))>0) {
#  next
#}
### Find the k closest points
#library_df <- library_df %>% select(-i)
closest <- nn2(data= library_df,
query = naspa_points, k=n_neighbors)
gpcc_df <- readRDS(file = paste0(output.p,"/gpcc_df.rds"))
loc <- data.frame(site="SanJuan_CO",
lon= c(-106.5,-106.0),
lat=c(37.50,38.00))
loc$site[1]
output.p <- file.path(output_path, loc$site[1])
gpcc_df <- readRDS(file = paste0(output.p,"/gpcc_df.rds"))
output_path
output_path <- "../output"
output.p <- file.path(output_path, loc$site[1])
data_path <- "../data"
output_path <- "../output"
output.p <- file.path(output_path, loc$site[1])
gpcc_df <- readRDS(file = paste0(output.p,"/gpcc_df.rds"))
loc$site
getwd()
setwd("D:/Multi_decadal_precp/github/")
gpcc_df <- readRDS(file = paste0(output.p,"/gpcc_df.rds"))
paras<- gpcc_df %>% select(date,shape3, rate3) %>%
group_by(month(date)) %>%
summarise(shape = mean(shape3), rate = mean(rate3)) %>%
rename(month =`month(date)`)
n_library <- length(gpcc_df$precip)
### Convert library into a dataframe
library_df <- data.frame(i = seq(1,n_library), spi_thisjuly = as.numeric(gpcc_df$spi3)) %>%
mutate(spi_nextmay = dplyr::lead(gpcc_df$spi5, n=9,  default = NA))%>%
mutate(spi_nextjuly = dplyr::lead(gpcc_df$spi3, n=12,  default = NA))%>%
drop_na()
library_df[1:50,]
library_df <- library_df %>% select(-i)
n_neighbors <- 10
year_i <- 1000
#### Eventually put this in a loop through years
date_subset <- seq(as.Date(paste0(year_i,"-08-01")),
as.Date(paste0(year_i+1,"-08-01")),
by = "month")-1
naspa_subset <- naspa_spi3 %>%
filter(date %in% date_subset)
naspa_points <- data.frame(spi_thisjuly = naspa_subset$spi3[[1]],
spi_nextapr = naspa_subset$spi5[[10]],
spi_nextjuly = naspa_subset$spi3[[13]])
readRDS(naspa_spi3,file = paste0(output.p,"/naspa_spi.rds"))
readRDS(naspa_spi3,file = paste0(output.p,"/naspa_spi.rds"))
readRDS(file = paste0(output.p,"/naspa_spi.rds"))
naspa_spi3 <-readRDS(file = paste0(output.p,"/naspa_spi.rds"))
naspa_subset <- naspa_spi3 %>%
filter(date %in% date_subset)
naspa_points <- data.frame(spi_thisjuly = naspa_subset$spi3[[1]],
spi_nextapr = naspa_subset$spi5[[10]],
spi_nextjuly = naspa_subset$spi3[[13]])
#if (sum(is.na(naspa_points))>0) {
#  next
#}
### Find the k closest points
#library_df <- library_df %>% select(-i)
closest <- nn2(data= library_df,
query = naspa_points, k=n_neighbors)
closest
i <- 3
k <- 3
closest_k <- closest$nn.idx[[k]]
fragment_k <- library_df[seq(closest_k, closest_k+12),]
fragment_k <- library_df[seq(3, 15),]
fragment_k
closest$nn.idx[[k]]
library_df[seq(closest_k, closest_k+12),]\
library_df[seq(closest_k, closest_k+12),]
naspa_subset
naspa_subset_k <- naspa_subset %>%
mutate(iter = paste0("iter_", k)) %>%
mutate(spi3 = fragment_k$spi_thisjuly)
naspa_subset_k
naspa_points
head(library_df)
head(predicted_df)
naspa_subset_ite
naspa_subset_k
library_df
head(gpcc_df)
View(gpcc_df)
?nn2
